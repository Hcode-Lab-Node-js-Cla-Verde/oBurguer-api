generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model migrations {
  id        Int    @id @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar(255)
}

model Person {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(250)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime? @default(now()) @db.DateTime(0)
  addresses Address[] @relation("addressesTopersons")
  users     User[]

  @@map("persons")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique(map: "UQ_97672ac88f789774dd47f7c8be3") @db.VarChar(120)
  password  String    @db.VarChar(255)
  photo     String?   @db.VarChar(255)
  personId  Int
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime? @default(now()) @db.DateTime(0)
  persons   Person    @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_users_persons")
  orders    Order[]   @relation("ordersTousers")

  @@index([personId], map: "FK_users_persons")
  @@map("users")
}

model Address {
  id         Int       @id @default(autoincrement())
  street     String    @db.VarChar(255)
  number     String?   @db.VarChar(16)
  complement String?   @db.VarChar(255)
  district   String    @db.VarChar(255)
  city       String    @db.VarChar(255)
  state      String    @db.VarChar(255)
  country    String    @db.VarChar(255)
  zipcode    String    @db.VarChar(8)
  personId   Int
  createdAt  DateTime  @default(now()) @db.DateTime(0)
  updatedAt  DateTime? @default(now()) @db.DateTime(0)
  persons    Person    @relation("addressesTopersons", fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_addresses_persons")

  @@index([personId], map: "FK_addresses_persons")
  @@map("addresses")
}

model IngredientType {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(250)
  ingredients Ingredient[]

  @@map("ingredient_types")
}

model Ingredient {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(250)
  price           Decimal          @default(0.00) @db.Decimal(10, 2)
  type_id         Int
  available       Int              @db.TinyInt
  createdAt       DateTime         @default(now()) @db.DateTime(0)
  updatedAt       DateTime         @default(now()) @db.DateTime(0)
  ingredientTypes IngredientType   @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_ingredients_ingredients_types")
  itemIngredients ItemIngredient[]

  @@index([type_id], map: "FK_ingredients_ingredients_types")
  @@map("ingredients")
}

model ItemIngredient {
  id               Int        @id @default(autoincrement())
  ingredient_price Decimal    @db.Decimal(10, 2)
  orderItemId      Int
  ingredientId     Int
  createdAt        DateTime   @default(now()) @db.DateTime(0)
  updatedAt        DateTime?  @default(now()) @db.DateTime(0)
  ingredients      Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_item_ingredients_ingredients")
  order_items      OrderItem  @relation("item_ingredientsToorder_items", fields: [orderItemId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_item_ingredients_order_items")

  @@index([ingredientId], map: "FK_item_ingredients_ingredients")
  @@index([orderItemId], map: "FK_item_ingredients_order_items")
  @@map("item_ingredients")
}

model OrderItem {
  id              Int              @id @default(autoincrement())
  name            String?          @db.VarChar(60)
  orderId         Int
  createdAt       DateTime         @default(now()) @db.DateTime(0)
  updatedAt       DateTime?        @default(now()) @db.DateTime(0)
  order           Order            @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_order_items_orders")
  itemIngredients ItemIngredient[] @relation("item_ingredientsToorder_items")

  @@index([orderId], map: "FK_order_items_orders")
  @@map("order_items")
}

model OrderStatus {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(45)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime? @default(now()) @db.DateTime(0)
  order     Order[]

  @@map("order_statuses")
}

model Order {
  id          Int         @id @default(autoincrement())
  total       Decimal     @db.Decimal(10, 2)
  statusId    Int
  userId      Int
  createdAt   DateTime    @default(now()) @db.DateTime(0)
  updatedAt   DateTime?   @default(now()) @db.DateTime(0)
  orderStatus OrderStatus @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_orders_order_statuses")
  users       User        @relation("ordersTousers", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_orders_users")
  orderItems  OrderItem[]

  @@index([statusId], map: "FK_orders_order_statuses")
  @@index([userId], map: "FK_orders_users")
  @@map("orders")
}

model password_recovery {
  id        Int       @id @default(autoincrement())
  token     String    @db.VarChar(250)
  user_id   Int
  resetAt   DateTime  @default(now()) @db.DateTime(0)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime? @default(now()) @db.DateTime(0)
}
